<h1>Analytics Dashboard</h1>

<div class="analytics-container">
  <div class="panel">
    <h2>Overall Statistics</h2>
    <div class="stats-grid">
      <div class="stat-box">
        <h3>Total Clicks</h3>
        <p id="total-clicks">Loading...</p>
      </div>
      <div class="stat-box">
        <h3>Total URLs</h3>
        <p id="total-urls">Loading...</p>
      </div>
      <div class="stat-box">
        <h3>Average CTR</h3>
        <p id="average-ctr">Loading...</p>
      </div>
    </div>
  </div>

  <div class="panel">
    <h2>Clickthrough Rates Over Time</h2>
    <canvas id="ctrChart"></canvas>
  </div>

  <div class="panel">
    <h2>Geo Distribution of Clicks</h2>
    <div id="map" style="width: 100%; height: 400px;"></div>
  </div>

  <div class="panel" class="statsChart">
    <h2>Device Statistics</h2>
    <canvas id="deviceChart"></canvas>
  </div>

  <div class="panel" class="statsChart">
    <h2>Browser Statistics</h2>
    <canvas id="browserChart"></canvas>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Fetch analytics data
  fetch('/api/analytics')
    .then(response => response.json())
    .then(data => {
      updateOverallStats(data);
      createCTRChart(data.ctrOverTime);
      createGeoMap(data.geoDistribution);
      createDeviceChart(data.deviceStats);
      createBrowserChart(data.browserStats);
    })
    .catch(error => console.error('Error fetching analytics data:', error));
});

function updateOverallStats(data) {
  document.getElementById('total-clicks').textContent = data.totalClicks;
  document.getElementById('total-urls').textContent = data.totalUrls;
  document.getElementById('average-ctr').textContent = (data.averageCTR * 100).toFixed(2) + '%';
}

function createCTRChart(ctrData) {
  const ctx = document.getElementById('ctrChart').getContext('2d');
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: ctrData.map(d => d.date),
      datasets: [{
        label: 'CTR',
        data: ctrData.map(d => d.ctr * 100),
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });
}

function createGeoMap(geoData) {
  const map = L.map('map').setView([0, 0], 2);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© OpenStreetMap contributors'
  }).addTo(map);

  for (const coords in geoData) {
    const [lat, lon] = coords.split(',').map(Number);
    if (!isNaN(lat) && !isNaN(lon)) {
      L.circle([lat, lon], {
        color: 'red',
        fillColor: '#f03',
        fillOpacity: 0.5,
        radius: Math.sqrt(geoData[coords]) * 10000
      }).addTo(map).bindPopup(`Clicks: ${geoData[coords]}`);
    }
  }
}

function createDeviceChart(deviceData) {
  const ctx = document.getElementById('deviceChart').getContext('2d');
  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: Object.keys(deviceData),
      datasets: [{
        data: Object.values(deviceData),
        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          position: 'top',
        },
        title: {
          display: true,
          text: 'Device Usage'
        }
      }
    }
  });
}

function createBrowserChart(browserData) {
  const ctx = document.getElementById('browserChart').getContext('2d');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: Object.keys(browserData),
      datasets: [{
        label: 'Usage',
        data: Object.values(browserData),
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
}
</script>